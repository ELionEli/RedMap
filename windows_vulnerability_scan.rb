#!/usr/bin/env ruby

# Windows Vulnerability Scanner
# Purpose: Educational tool for learning about Windows system security
# Author: Security Research Team
# Note: This tool is for educational purposes only. Use only on systems you own or have permission to test.

require 'socket'
require 'timeout'
require 'win32/registry'
require 'win32/service'
require 'windows_error'
require 'net/http'
require 'json'
require 'colorize'

class WindowsVulnerabilityScanner
  def initialize
    @vulnerabilities = []
    @system_info = {}
  end

  def run_scan
    puts "\n[*] Starting Windows Vulnerability Analysis...".yellow
    
    gather_system_info
    check_windows_version
    check_security_policies
    check_open_ports
    check_service_vulnerabilities
    check_registry_settings
    check_user_accounts
    check_installed_software
    check_firewall_status
    check_antivirus_status
    
    generate_report
  end

  private

  def gather_system_info
    puts "\n[*] Gathering System Information...".blue
    begin
      @system_info[:hostname] = Socket.gethostname
      @system_info[:windows_version] = `ver`.strip
      @system_info[:architecture] = ENV['PROCESSOR_ARCHITECTURE']
      @system_info[:username] = ENV['USERNAME']
      @system_info[:domain] = ENV['USERDOMAIN']
    rescue => e
      log_vulnerability("Error gathering system info: #{e.message}", :high)
    end
  end

  def check_windows_version
    puts "[*] Checking Windows Version...".blue
    begin
      if @system_info[:windows_version] =~ /Version ([\d\.]+)/
        version = $1
        if version.to_f < 10.0
          log_vulnerability("Outdated Windows version detected: #{version}", :high)
        end
      end
    rescue => e
      log_vulnerability("Error checking Windows version: #{e.message}", :medium)
    end
  end

  def check_security_policies
    puts "[*] Analyzing Security Policies...".blue
    begin
      # Check password policy
      password_policy = `net accounts`
      if password_policy =~ /Minimum password length:\s+(\d+)/
        length = $1.to_i
        log_vulnerability("Weak password policy - minimum length: #{length}", :high) if length < 8
      end

      # Check account lockout policy
      if password_policy =~ /Lockout threshold:\s+NEVER/i
        log_vulnerability("No account lockout policy configured", :high)
      end
    rescue => e
      log_vulnerability("Error checking security policies: #{e.message}", :medium)
    end
  end

  def check_open_ports
    puts "[*] Scanning for Open Ports...".blue
    common_ports = [21, 22, 23, 25, 53, 80, 443, 445, 3389, 5985]
    
    common_ports.each do |port|
      begin
        Timeout.timeout(2) do
          begin
            socket = TCPSocket.new('127.0.0.1', port)
            log_vulnerability("Port #{port} is open", :medium)
            socket.close
          rescue Errno::ECONNREFUSED
            # Port is closed
          end
        end
      rescue Timeout::Error
        # Port is filtered
      end
    end
  end

  def check_service_vulnerabilities
    puts "[*] Checking Service Configurations...".blue
    begin
      Win32::Service.services.each do |service|
        if service.start_type == Win32::Service::AUTO_START
          check_service_security(service.service_name)
        end
      end
    rescue => e
      log_vulnerability("Error checking services: #{e.message}", :medium)
    end
  end

  def check_service_security(service_name)
    begin
      service_details = `sc qc "#{service_name}"`
      if service_details =~ /SERVICE_START_NAME\s*: LocalSystem/i
        log_vulnerability("Service #{service_name} running with SYSTEM privileges", :medium)
      end
    rescue => e
      log_vulnerability("Error checking service #{service_name}: #{e.message}", :low)
    end
  end

  def check_registry_settings
    puts "[*] Analyzing Registry Settings...".blue
    check_registry_key(Win32::Registry::HKEY_LOCAL_MACHINE,
                      'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System',
                      'EnableLUA',
                      "UAC is disabled")
    
    check_registry_key(Win32::Registry::HKEY_LOCAL_MACHINE,
                      'SYSTEM\\CurrentControlSet\\Control\\Terminal Server',
                      'fDenyTSConnections',
                      "Remote Desktop is enabled")
  end

  def check_registry_key(hkey, path, value_name, vulnerability_desc)
    begin
      hkey.open(path) do |reg|
        value = reg[value_name]
        if value == 0
          log_vulnerability(vulnerability_desc, :medium)
        end
      end
    rescue Win32::Registry::Error => e
      # Key doesn't exist or access denied
    end
  end

  def check_user_accounts
    puts "[*] Analyzing User Accounts...".blue
    begin
      `net user`.split("\n").each do |line|
        if line =~ /Admin|Administrator/i
          log_vulnerability("Administrative account detected: #{line.strip}", :medium)
        end
      end
    rescue => e
      log_vulnerability("Error checking user accounts: #{e.message}", :medium)
    end
  end

  def check_installed_software
    puts "[*] Checking Installed Software...".blue
    begin
      Win32::Registry::HKEY_LOCAL_MACHINE.open('SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall') do |reg|
        reg.each_key do |key_name|
          begin
            reg.open(key_name) do |key|
              name = key['DisplayName'] rescue nil
              version = key['DisplayVersion'] rescue nil
              if name && version
                check_software_version(name, version)
              end
            end
          rescue Win32::Registry::Error
            next
          end
        end
      end
    rescue => e
      log_vulnerability("Error checking installed software: #{e.message}", :medium)
    end
  end

  def check_software_version(name, version)
    # Add known vulnerable software versions here
    vulnerable_software = {
      'Adobe Reader' => '20',
      'Java' => '8.0',
      'Flash Player' => '32'
    }

    vulnerable_software.each do |software, min_version|
      if name.include?(software) && version.to_f < min_version.to_f
        log_vulnerability("Outdated software detected: #{name} version #{version}", :high)
      end
    end
  end

  def check_firewall_status
    puts "[*] Checking Firewall Status...".blue
    begin
      firewall_status = `netsh advfirewall show allprofiles state`
      if firewall_status =~ /State\s+OFF/i
        log_vulnerability("Windows Firewall is disabled", :high)
      end
    rescue => e
      log_vulnerability("Error checking firewall status: #{e.message}", :medium)
    end
  end

  def check_antivirus_status
    puts "[*] Checking Antivirus Status...".blue
    begin
      Win32::Registry::HKEY_LOCAL_MACHINE.open('SOFTWARE\\Microsoft\\Windows Defender\\Real-Time Protection') do |reg|
        if reg['DisableRealtimeMonitoring'].to_i == 1
          log_vulnerability("Real-time protection is disabled", :high)
        end
      end
    rescue Win32::Registry::Error => e
      log_vulnerability("Windows Defender may not be installed or accessible", :high)
    end
  end

  def log_vulnerability(description, severity)
    @vulnerabilities << {
      description: description,
      severity: severity,
      timestamp: Time.now
    }
  end

  def generate_report
    puts "\n[+] Vulnerability Scan Complete! Generating Report...".green
    puts "\nSystem Information:".yellow
    @system_info.each do |key, value|
      puts "#{key}: #{value}"
    end

    puts "\nVulnerabilities Found:".yellow
    @vulnerabilities.group_by { |v| v[:severity] }.each do |severity, vulns|
      puts "\n#{severity.to_s.upcase} Severity:".send(severity_color(severity))
      vulns.each do |v|
        puts "- #{v[:description]}"
      end
    end

    save_report
  end

  def severity_color(severity)
    case severity
    when :high then :red
    when :medium then :yellow
    when :low then :blue
    else :white
    end
  end

  def save_report
    report = {
      scan_time: Time.now,
      system_info: @system_info,
      vulnerabilities: @vulnerabilities
    }

    File.write("windows_vulnerability_report_#{Time.now.strftime('%Y%m%d_%H%M%S')}.json",
               JSON.pretty_generate(report))
  end
end

# Display warning and get user consent
puts "\n".red
puts "=" * 80
puts "WARNING: This tool is for educational purposes only!".red
puts "Only run this scanner on systems you own or have explicit permission to test.".red
puts "=" * 80
puts "\n"

print "Do you understand and agree to proceed? (yes/no): "
if gets.chomp.downcase == 'yes'
  scanner = WindowsVulnerabilityScanner.new
  scanner.run_scan
else
  puts "Scan aborted. Exiting...".red
  exit
end 